// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestringApp.DataAccess;

namespace RestringApp.Migrations
{
    [DbContext(typeof(RestringAppContext))]
    partial class RestringAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RestringApp.DataAccess.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("RestringApp.DataAccess.Restring", b =>
                {
                    b.Property<int>("RestringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateStrung")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RacketBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RacketModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("String")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TensionCrosses")
                        .IsRequired()
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal?>("TensionMains")
                        .IsRequired()
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("RestringId");

                    b.HasIndex("ContactId");

                    b.ToTable("Restrings");
                });

            modelBuilder.Entity("RestringApp.DataAccess.Restring", b =>
                {
                    b.HasOne("RestringApp.DataAccess.Contact", "Contact")
                        .WithMany("Restrings")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("RestringApp.DataAccess.Contact", b =>
                {
                    b.Navigation("Restrings");
                });
#pragma warning restore 612, 618
        }
    }
}
